{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import { createContext } from \"tailwindcss/lib/lib/setupContextUtils\";\r\nimport { generateRules } from \"tailwindcss/lib/lib/generateRules\";\r\nimport resolveConfig from \"tailwindcss/resolveConfig\";\r\nimport type { Config } from \"tailwindcss/types/config\";\r\nimport escalade from \"escalade/sync\";\r\nimport { IOption } from \"./options\";\r\nimport objectHash from \"object-hash\";\r\nimport path from \"path\";\r\n\r\nlet tailwindConfig: Config = {\r\n    content: [],\r\n    theme: {},\r\n};\r\n\r\nconst contextMap = new Map();\r\n\r\nconst __defaultConfig__ = \"tailwind.config.js\";\r\n\r\nfunction bigSign(bigIntValue: number) {\r\n    const left: any = bigIntValue > 0n;\r\n    const right: any = bigIntValue < 0n;\r\n    return left - right;\r\n}\r\n\r\nexport function sortClasses(classStr: string, options: IOption = {}): string {\r\n    const tailwindConfigPath = escalade(__dirname, (dir, names) => {\r\n        if (names.includes(__defaultConfig__)) {\r\n            return __defaultConfig__;\r\n        }\r\n    });\r\n\r\n    tailwindConfig.content = [\"no-op\"];\r\n    if (tailwindConfigPath) {\r\n        tailwindConfig = require(tailwindConfigPath);\r\n    }\r\n\r\n    if (options.tailwindConfig && options.tailwindConfigPath) {\r\n        throw new Error(\r\n            \"You can not specify tailwinfConfig or tailwinfConfigPath. Please specify either one.\"\r\n        );\r\n    }\r\n\r\n    if (options.tailwindConfigPath) {\r\n        tailwindConfig = requireConfig(options.tailwindConfigPath);\r\n    }\r\n\r\n    if (options.tailwindConfig) {\r\n        tailwindConfig = options.tailwindConfig;\r\n    }\r\n\r\n    const hash = objectHash(tailwindConfig, { ignoreUnknown: true });\r\n\r\n    let context;\r\n\r\n    const existing = contextMap.get(hash);\r\n\r\n    if (existing && existing.hash === hash) {\r\n        context = existing.context;\r\n    } else {\r\n        context = createContext(resolveConfig(tailwindConfig));\r\n        contextMap.set(hash, { context, hash });\r\n    }\r\n\r\n    const parts: string[] = classStr\r\n        .split(/\\s+/)\r\n        .filter((x) => x !== \"\" && x !== \"|\");\r\n\r\n    const unknownClassNames: string[] = [];\r\n    const knownClassNamesWithOrder: (string | number)[][] = [];\r\n\r\n    for (const className of parts) {\r\n        let order: number | null;\r\n\r\n        const ruleOrder = generateRules(new Set([className]), context).sort(\r\n            ([a], [z]) => bigSign(z - a)\r\n        )[0];\r\n\r\n        if (ruleOrder) {\r\n            order = ruleOrder[0];\r\n        } else {\r\n            order = null;\r\n        }\r\n\r\n        if (order) {\r\n            knownClassNamesWithOrder.push([className, order]);\r\n        } else {\r\n            unknownClassNames.push(className);\r\n        }\r\n    }\r\n\r\n    const knownClassNames = knownClassNamesWithOrder\r\n        .sort(([, a]: any, [, z]: any) => (a === z ? 0 : bigSign(a - z)))\r\n        .map(([className]) => className);\r\n\r\n    return [...unknownClassNames, ...knownClassNames].join(\" \");\r\n}\r\n\r\nfunction requireConfig(configPath: string) {\r\n    try {\r\n        return require(configPath);\r\n    } catch (err: any) {\r\n        if (\r\n            err.code === \"MODULE_NOT_FOUND\" &&\r\n            err.moduleName === path.resolve(configPath)\r\n        ) {\r\n            throw new Error(\"tailwind config could not be found at: \" + path);\r\n        }\r\n\r\n        throw err;\r\n    }\r\n}\r\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,iBAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA8B,iDAC9BC,EAA8B,6CAC9BC,EAA0B,wCAE1BC,EAAqB,4BAErBC,EAAuB,0BACvBC,EAAiB,mBAEbC,EAAyB,CACzB,QAAS,CAAC,EACV,MAAO,CAAC,CACZ,EAEMC,EAAa,IAAI,IAEjBC,EAAoB,qBAE1B,SAASC,EAAQC,EAAqB,CAClC,IAAMC,EAAYD,EAAc,GAC1BE,EAAaF,EAAc,GACjC,OAAOC,EAAOC,CAClB,CAEO,SAASd,EAAYe,EAAkBC,EAAmB,CAAC,EAAW,CACzE,IAAMC,KAAqB,EAAAC,SAAS,UAAW,CAACC,EAAKC,IAAU,CAC3D,GAAIA,EAAM,SAASV,CAAiB,EAChC,OAAOA,CAEf,CAAC,EAOD,GALAF,EAAe,QAAU,CAAC,OAAO,EAC7BS,IACAT,EAAiB,QAAQS,IAGzBD,EAAQ,gBAAkBA,EAAQ,mBAClC,MAAM,IAAI,MACN,sFACJ,EAGAA,EAAQ,qBACRR,EAAiBa,EAAcL,EAAQ,kBAAkB,GAGzDA,EAAQ,iBACRR,EAAiBQ,EAAQ,gBAG7B,IAAMM,KAAO,EAAAC,SAAWf,EAAgB,CAAE,cAAe,EAAK,CAAC,EAE3DgB,EAEEC,EAAWhB,EAAW,IAAIa,CAAI,EAEhCG,GAAYA,EAAS,OAASH,EAC9BE,EAAUC,EAAS,SAEnBD,KAAU,oBAAc,EAAAE,SAAclB,CAAc,CAAC,EACrDC,EAAW,IAAIa,EAAM,CAAE,QAAAE,EAAS,KAAAF,CAAK,CAAC,GAG1C,IAAMK,EAAkBZ,EACnB,MAAM,KAAK,EACX,OAAQa,GAAMA,IAAM,IAAMA,IAAM,GAAG,EAElCC,EAA8B,CAAC,EAC/BC,EAAkD,CAAC,EAEzD,QAAWC,KAAaJ,EAAO,CAC3B,IAAIK,EAEEC,KAAY,iBAAc,IAAI,IAAI,CAACF,CAAS,CAAC,EAAGP,CAAO,EAAE,KAC3D,CAAC,CAACU,CAAC,EAAG,CAACC,CAAC,IAAMxB,EAAQwB,EAAID,CAAC,CAC/B,EAAE,GAEED,EACAD,EAAQC,EAAU,GAElBD,EAAQ,KAGRA,EACAF,EAAyB,KAAK,CAACC,EAAWC,CAAK,CAAC,EAEhDH,EAAkB,KAAKE,CAAS,CAExC,CAEA,IAAMK,EAAkBN,EACnB,KAAK,CAAC,CAAC,CAAEI,CAAC,EAAQ,CAAC,CAAEC,CAAC,IAAYD,IAAMC,EAAI,EAAIxB,EAAQuB,EAAIC,CAAC,CAAE,EAC/D,IAAI,CAAC,CAACJ,CAAS,IAAMA,CAAS,EAEnC,MAAO,CAAC,GAAGF,EAAmB,GAAGO,CAAe,EAAE,KAAK,GAAG,CAC9D,CAEA,SAASf,EAAcgB,EAAoB,CACvC,GAAI,CACA,OAAO,QAAQA,EACnB,OAASC,EAAP,CACE,MACIA,EAAI,OAAS,oBACbA,EAAI,aAAe,EAAAC,QAAK,QAAQF,CAAU,EAEpC,IAAI,MAAM,0CAA4C,EAAAE,OAAI,EAG9DD,CACV,CACJ",
  "names": ["main_exports", "__export", "sortClasses", "__toCommonJS", "import_setupContextUtils", "import_generateRules", "import_resolveConfig", "import_sync", "import_object_hash", "import_path", "tailwindConfig", "contextMap", "__defaultConfig__", "bigSign", "bigIntValue", "left", "right", "classStr", "options", "tailwindConfigPath", "escalade", "dir", "names", "requireConfig", "hash", "objectHash", "context", "existing", "resolveConfig", "parts", "x", "unknownClassNames", "knownClassNamesWithOrder", "className", "order", "ruleOrder", "a", "z", "knownClassNames", "configPath", "err", "path"]
}
